class Grid
    rows
    cols
    unknown_cell
    water_cell
    ship_cell
    self.__table
    def __init__(self)
    def within_bounds(row, col) -> bool
    def get_cell(self, row, col) -> str
    def is_unknown(self, row, col) -> bool
    def is_water(self, row, col) -> bool
    def is_ship(self, row, col) -> bool
    def set_unknown(self, row, col)
    def set_water(self, row, col)
    def set_ship(self, row, col)
    def collect_unknown_cells(self) -> list()
    def finalize(self)
    def show_row(self, row)
    def show(self)

class Player
    ai_type
    hi_type
    ship_views
    self.name
    self.type
    self.ships_count
    self.unknown_cells
    self.ship_cells_found
    self.cells_to_check
    self.grid
    self.opponent_grid
    def __init__(self)
    def has_ships(self) -> bool
    def is_ai(self) -> bool
    def has_ship_cells_found(self) -> bool
    def has_cells_to_check(self) -> bool
    def check_cell(self, index) -> (int, int)
    def borrow_longest_ship(self) -> int
    def release_longest_ship(self, length)
    def try_fit_ship(self, length, row, col, row_dir, col_dir) -> list()
    def unroll(self, occupied)
    def gen_ships(self) -> bool
    def report_invalid_input(self)
    def get_user_position(self, message) -> (int, int)
    def get_user_interval(self) -> (int, int, int, int)
    def add_water_around(self, row, col)
    def positions_unknown(self, positions) -> bool
    def add_ship_pieces(self, pieces)
    def add_oriented_ship(self, dim, lower, higher, is_horizontal) -> bool
    def map_values(self, a, b, c) -> (int, int, int)
    def add_ship(self, ships_count) -> list()
    def find_ship_segments(self, row, col) -> list()
    def remove_water_cell(self, row, col)
    def remove_ship_segments(self, segments)
    def remove_ship(self, ships_count) -> list()
    def set_ships(self)
    def get_user_strike(self) -> (int, int)
    def show_header(self, ships_count)
    def show_ships(self, ships_count)

class Game
    def greet(self)
    def __init__(self)
    def show_row_prefix(self)
    def show_row_middle(self)
    def show_row_suffix(self)
    def show_grid_prefix(self)
    def show_grid_suffix(self)
    def show_margin(self, left, middle, right)
    def show_active_player_name(self)
    def show_spanned_player_name(self, index)
    def show_player_ships(self, index)
    def show_players(self)
    def show_grids(self)
    def show_turns(self)
    def show(self)
    def report_grid_is_set(self, p)
    def set_hi_player(self, p, n)
    def set_ai_player(self, p, n)
    def user_vs_user(self)
    def user_vs_computer(self)
    def computer_vs_computer(self)
    def set_players(self)
    def active_player(self) -> Player()
    def opponent(self) -> Player()
    def try_ai_strike(self, row, col) -> bool
    def eval_hi_strike(self,rC,cC,agent,enemy)
    def strike(self)
    def play(self)
